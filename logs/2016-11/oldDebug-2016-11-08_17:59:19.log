2016-11-08 17:58:25,059 DEBUG(NiceForestService.java:34): Server started
2016-11-08 17:58:29,206 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:29,207 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:29,274 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:29,275 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:29,277 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:29.217+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:29,282 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:29.217+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:29,283 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:29,497 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 214ms.
2016-11-08 17:58:29,498 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:29,499 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:29,501 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:29,502 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:29.217+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:29,504 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:29.217+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:29,505 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:29,583 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 78ms.
2016-11-08 17:58:29,584 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:32,135 DEBUG(TaskSimple.java:65): 0
2016-11-08 17:58:33,579 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:33,582 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:33,583 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:33,584 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:33,584 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:33.583+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:33,586 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:33.583+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:33,587 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:33,679 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 92ms.
2016-11-08 17:58:33,681 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:33,694 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:33,695 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:33,699 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:33.583+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:33,701 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:33.583+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:33,702 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:33,755 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:33,756 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:33,757 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:33,757 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:33,758 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:33.757+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:33,759 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:33.757+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:33,759 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:33,798 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 95ms.
2016-11-08 17:58:33,799 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:33,833 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 73ms.
2016-11-08 17:58:33,834 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:33,836 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:33,836 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:33,836 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:33.757+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:33,838 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:33.757+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:33,839 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:33,920 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 81ms.
2016-11-08 17:58:33,921 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:33,939 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:33,940 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:33,941 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:33,941 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:33,941 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:33.941+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:33,942 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:33.941+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:33,942 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,105 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 163ms.
2016-11-08 17:58:34,106 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:34,107 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,107 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,107 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:33.941+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:34,108 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:33.941+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:34,108 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,121 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:34,122 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:34,123 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,123 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,123 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:34.123+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:34,125 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:34.123+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:34,125 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,203 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 95ms.
2016-11-08 17:58:34,204 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:34,208 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 83ms.
2016-11-08 17:58:34,208 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:34,208 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,209 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,209 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:34.123+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:34,209 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:34.123+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:34,209 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,259 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:34,272 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:34,273 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,273 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,273 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:34.272+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:34,275 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:34.272+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:34,287 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 78ms.
2016-11-08 17:58:34,288 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:34,288 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,380 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 90ms.
2016-11-08 17:58:34,381 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:34,389 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,389 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,389 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:34.272+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:34,390 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:34.272+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:34,390 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,629 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:58:34,629 DEBUG(TaskSimple.java:38): Starting task
2016-11-08 17:58:34,633 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,633 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,634 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:34.630+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:58:34,626 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 217ms.
2016-11-08 17:58:34,635 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:34.630+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:58:34,635 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:34,635 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,716 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 77ms.
2016-11-08 17:58:34,716 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:58:34,717 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:58:34,717 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:58:34,717 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:58:34.630+01:00,dataSource=youbora_events_65,filter=[user_id == "10979174"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:58:34,718 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10979174"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:58:34.630+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:58:34,718 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:58:34,799 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 81ms.
2016-11-08 17:58:34,799 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:58:44,415 DEBUG(TaskSimple.java:65): 0
2016-11-08 17:58:44,954 DEBUG(TaskSimple.java:65): 0
2016-11-08 17:58:48,546 DEBUG(TaskSimple.java:65): 0
2016-11-08 17:58:48,714 DEBUG(TaskSimple.java:65): 0
2016-11-08 17:58:48,723 DEBUG(TaskSimple.java:65): 0
2016-11-08 17:58:48,820 DEBUG(TaskSimple.java:65): 0
