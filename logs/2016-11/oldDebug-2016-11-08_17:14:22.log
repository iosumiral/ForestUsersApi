2016-11-08 17:05:58,513 DEBUG(NiceForestService.java:34): Server started
2016-11-08 17:06:01,789 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:06:01,792 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:06:01,878 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:06:01,879 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:06:01,881 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:06:01.809+01:00,dataSource=youbora_events_65,filter=[user_id == "12648743", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:06:01,888 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"12648743"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:06:01.809+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:06:01,889 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:06:02,365 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 476ms.
2016-11-08 17:06:02,365 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:06:02,367 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:06:02,368 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:06:02,368 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:06:01.809+01:00,dataSource=youbora_events_65,filter=[user_id == "12648743"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:06:02,369 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"12648743"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:06:01.809+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:06:02,370 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:06:02,451 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 80ms.
2016-11-08 17:06:02,452 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:06:05,538 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:06:05,565 DEBUG(TaskSimple.java:72): 0
2016-11-08 17:06:40,108 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:06:40,112 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:06:40,113 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:06:40,114 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:06:40,115 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:06:40.113+01:00,dataSource=youbora_events_65,filter=[user_id == "12648743", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:06:40,117 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"12648743"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:06:40.113+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:06:40,118 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:06:40,235 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 117ms.
2016-11-08 17:06:40,235 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:06:40,236 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:06:40,236 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:06:40,236 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:06:40.113+01:00,dataSource=youbora_events_65,filter=[user_id == "12648743"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:06:40,236 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"12648743"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:06:40.113+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:06:40,237 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:06:40,318 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 81ms.
2016-11-08 17:06:40,318 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:06:41,712 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:06:41,713 DEBUG(TaskSimple.java:72): 0
2016-11-08 17:07:47,530 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:07:47,531 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:07:47,532 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:07:47,532 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:07:47,533 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:07:47.532+01:00,dataSource=youbora_events_65,filter=[user_id == "13186893", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:07:47,533 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"13186893"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:07:47.532+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:07:47,533 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:07:47,765 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 232ms.
2016-11-08 17:07:47,765 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:07:47,766 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:07:47,767 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:07:47,767 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:07:47.532+01:00,dataSource=youbora_events_65,filter=[user_id == "13186893"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:07:47,768 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"13186893"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:07:47.532+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:07:47,769 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:07:47,896 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 127ms.
2016-11-08 17:07:47,896 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:07:49,306 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:07:49,308 DEBUG(TaskSimple.java:72): 0
2016-11-08 17:09:57,301 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:09:57,302 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:09:57,303 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:09:57,304 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:09:57,304 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:09:57.303+01:00,dataSource=youbora_events_65,filter=[user_id == "9944467", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:09:57,305 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"9944467"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:09:57.303+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:09:57,311 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:09:57,512 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 201ms.
2016-11-08 17:09:57,513 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:09:57,513 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:09:57,513 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:09:57,514 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:09:57.303+01:00,dataSource=youbora_events_65,filter=[user_id == "9944467"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:09:57,515 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"9944467"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:09:57.303+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:09:57,516 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:09:57,650 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 133ms.
2016-11-08 17:09:57,650 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:09:58,910 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:09:58,912 DEBUG(TaskSimple.java:72): 0
2016-11-08 17:10:21,659 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:10:21,661 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:10:21,662 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:10:21,662 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:10:21,662 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:10:21.661+01:00,dataSource=youbora_events_65,filter=[user_id == "10515411", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:10:21,663 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10515411"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:10:21.661+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:10:21,663 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:10:21,787 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 124ms.
2016-11-08 17:10:21,787 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:10:21,788 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:10:21,788 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:10:21,789 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:10:21.661+01:00,dataSource=youbora_events_65,filter=[user_id == "10515411"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:10:21,789 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"10515411"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:10:21.661+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:10:21,789 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:10:21,971 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 181ms.
2016-11-08 17:10:21,972 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:10:23,429 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:10:23,430 DEBUG(TaskSimple.java:72): 0
2016-11-08 17:11:52,373 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:11:52,375 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:11:52,377 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:11:52,377 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:11:52,377 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:11:52.377+01:00,dataSource=youbora_events_65,filter=[user_id == "9586913", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:11:52,379 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"9586913"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:11:52.377+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:11:52,381 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:11:52,570 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 180ms.
2016-11-08 17:11:52,570 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:11:52,571 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:11:52,571 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:11:52,571 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:11:52.377+01:00,dataSource=youbora_events_65,filter=[user_id == "9586913"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:11:52,571 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"9586913"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:11:52.377+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:11:52,571 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:11:52,695 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 124ms.
2016-11-08 17:11:52,695 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:11:54,104 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:11:54,105 DEBUG(TaskSimple.java:72): 0
2016-11-08 17:13:53,534 DEBUG(NiceForestContainer.java:24): Handling request
2016-11-08 17:13:53,535 DEBUG(TaskSimple.java:39): Starting task
2016-11-08 17:13:53,536 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:13:53,536 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:13:53,536 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:13:53.536+01:00,dataSource=youbora_events_65,filter=[user_id == "13285346", event_type == "STOP"],granularity=ALL,limit=2,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 17:13:53,537 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"13285346"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:13:53.536+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":2, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 17:13:53,537 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:13:53,702 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 165ms.
2016-11-08 17:13:53,703 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 2 rows.
2016-11-08 17:13:53,703 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 17:13:53,704 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 17:13:53,704 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(viewtime) AS sum_viewtime, (sum_viewtime / count) AS avg_viewtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS avg_buffer_ratio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T17:13:53.536+01:00,dataSource=youbora_events_65,filter=[user_id == "13285346"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 17:13:53,704 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"13285346"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_viewtime", "fieldName":"viewtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_viewtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_viewtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T17:13:53.536+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 17:13:53,704 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 17:13:53,805 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 100ms.
2016-11-08 17:13:53,805 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
2016-11-08 17:13:55,006 DEBUG(TaskSimple.java:66): 0
2016-11-08 17:13:55,007 DEBUG(TaskSimple.java:72): 0
