2016-11-08 11:23:09,496 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 11:23:09,500 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 11:23:09,502 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[avg_bitrate, buffer_underruns, buffer_underrun_total, viewtime, startup_time, outBytes],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T11:23:08.783+01:00,dataSource=youbora_events_65,filter=[user_id == "free", event_type == "STOP"],granularity=ALL,limit=8,groupBy=false,orderBy=[timestamp DESC],having=[]]
2016-11-08 11:23:09,507 DEBUG(SelectQuery.java:34): Created select query: 
 {"queryType": "select","dataSource": "youbora_events_65","granularity": "all","descending": "true","dimensions":[],"metrics":["avg_bitrate", "buffer_underruns", "buffer_underrun_total", "viewtime", "startup_time", "outBytes"],"filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"free"}, {"type":"selector", "dimension":"event_type", "value":"STOP"}]},"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T11:23:08.783+01:00"],"pagingSpec":{"pagingIdentifiers":{}, "threshold":8, "fromNext": true},"context":{"timeout":40000}}
2016-11-08 11:23:09,508 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 11:23:09,819 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 311ms.
2016-11-08 11:23:09,819 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 8 rows.
2016-11-08 11:23:09,821 WARN (CreateDruidQuery.java:97): There cannot be two values with same name. 'count' was discarded.
2016-11-08 11:23:09,822 DEBUG(CreateDruidQuery.java:271): Checking parameters...
2016-11-08 11:23:09,823 DEBUG(CreateDruidQuery.java:230): Params OK. Preparing query...
2016-11-08 11:23:09,824 INFO (CreateDruidQuery.java:239): CreateDruidQuery [select=[SUM(avg_bitrate) AS sum_avg_bitrate, COUNT(*) AS count, (sum_avg_bitrate / count) AS avg_avg_bitrate, SUM(buffer_underruns) AS sum_buffer_underruns, (sum_buffer_underruns / count) AS avg_buffer_underruns, SUM(buffer_ratio) AS sum_buffer_ratio, (sum_buffer_ratio / count) AS avg_buffer_ratio, SUM(playtime) AS sum_playtime, (sum_playtime / count) AS avg_playtime, SUM(startup_time) AS sum_startup_time, (sum_startup_time / count) AS avg_startup_time, SUM(buffer_underrun_total/viewtime) AS sumOfBufferRatios, (SUM(sumOfBufferRatios) / SUM(count)) AS bufferRatio],fromDate=1970-01-01T01:00:00.000+01:00,toDate=2016-11-08T11:23:08.783+01:00,dataSource=youbora_events_65,filter=[user_id == "free"],granularity=ALL,limit=100,groupBy=true,orderBy=[],having=[]]
2016-11-08 11:23:09,825 DEBUG(TimeseriesQuery.java:24): Created timeseries query: 
 {"queryType": "timeseries","dataSource": "youbora_events_65","granularity": "all","filter": { "type": "and","fields":[{"type":"selector", "dimension":"user_id", "value":"free"}]},"aggregations":[{"type":"doubleSum", "name":"sum_avg_bitrate", "fieldName":"avg_bitrate"}, {"type":"count","name":"count"}, {"type":"doubleSum", "name":"sum_buffer_underruns", "fieldName":"buffer_underruns"}, {"type":"doubleSum", "name":"sum_buffer_ratio", "fieldName":"buffer_ratio"}, {"type":"doubleSum", "name":"sum_playtime", "fieldName":"playtime"}, {"type":"doubleSum", "name":"sum_startup_time", "fieldName":"startup_time"}, {"type":"javascript","name":"sumOfBufferRatios","fieldNames":["buffer_underrun_total","viewtime","viewtime"],"fnAggregate":"function(current,buffer_underrun_total,viewtime,viewtime){if(viewtime > 0){return current + (buffer_underrun_total/viewtime);}else{return current;}}","fnCombine":"function(partialA, partialB){return partialA + partialB;}","fnReset":"function(){return 0;}"}],"postAggregations":[{"type":"arithmetic","name":"avg_avg_bitrate","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_avg_bitrate"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_underruns","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_underruns"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_buffer_ratio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_buffer_ratio"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_playtime","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_playtime"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"avg_startup_time","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sum_startup_time"},{"type":"fieldAccess","fieldName":"count"}]}, {"type":"arithmetic","name":"bufferRatio","fn":"/","fields":[{"type":"fieldAccess","fieldName":"sumOfBufferRatios"},{"type":"fieldAccess","fieldName":"count"}]}],"intervals": ["1970-01-01T01:00:00.000+01:00/2016-11-08T11:23:08.783+01:00"],"context":{"skipEmptyBuckets":"false","timeout":40000}}
2016-11-08 11:23:09,826 DEBUG(DruidBrokerUtil.java:28): POSTing query to http://druid-brokers-nl.youbora.com/druid/v2/?pretty.
2016-11-08 11:23:10,321 DEBUG(DruidBrokerUtil.java:125): Query resolved by druid lib broker in 495ms.
2016-11-08 11:23:10,322 DEBUG(DruidBrokerUtil.java:126): JSON result correctly received with 1 rows.
